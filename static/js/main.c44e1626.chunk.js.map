{"version":3,"sources":["index.js"],"names":["Block","props","className","onClick","value","Winner","blocks","winningCombinations","i","length","x","y","z","Board","state","Array","fill","isX","clicks","winner","this","alert","id","slice","setState","checkWinner","handleClick","status","renderBlock","React","Component","Game","align","ReactDOM","render","document","getElementById"],"mappings":"0MAKA,SAASA,EAAMC,GACX,OACI,wBACIC,UAAY,QACZC,QAAWF,EAAME,QAFrB,SAIKF,EAAMG,QAKnB,SAASC,EAAOC,GAWZ,IAVA,IAAMC,EAAsB,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEHC,EAAI,EAAIA,EAAID,EAAoBE,SAAUD,EAAE,CAAC,IAAD,cACjCD,EAAoBC,GADa,GACzCE,EADyC,KACvCC,EADuC,KACrCC,EADqC,KAEhD,GAAGN,EAAOI,IAAMJ,EAAOI,KAAOJ,EAAOK,IAAML,EAAOI,KAAOJ,EAAOM,GAC5D,OAAON,EAAOI,GAGtB,OAAO,K,IAILG,E,kDACF,WAAYZ,GAAO,IAAD,8BACd,cAAMA,IACDa,MAAQ,CACTR,OAASS,MAAM,GAAGC,KAAK,MACvBC,KAAK,EACLC,OAAQ,GALE,E,0DASd,IAAMC,EAASd,EAAOe,KAAKN,MAAMR,QAC9Ba,EACCE,MAAM,QAAQF,EAAO,aAGD,GAArBC,KAAKN,MAAMI,QACVG,MAAM,kC,kCAGFC,GACR,IAAMZ,EAAIU,KAAKN,MAAMR,OAAOiB,QACzBlB,EAAOK,IAAMA,EAAEY,KAGfF,KAAKN,MAAMG,IACVP,EAAEY,GAAM,IAERZ,EAAEY,GAAM,IACZF,KAAKI,SACD,CACIlB,OAASI,EACTO,KAAOG,KAAKN,MAAMG,IAClBC,OAASE,KAAKN,MAAMI,OAAO,GAE/BE,KAAKK,gB,kCAGDH,GAAI,IAAD,OACX,OACI,cAACtB,EAAD,CACII,MAASgB,KAAKN,MAAMR,OAAOgB,GAC3BnB,QAAW,kBAAM,EAAKuB,YAAYJ,Q,+BAO1C,IAAMH,EAASd,EAAOe,KAAKN,MAAMR,QAC7BqB,EAAS,iBAAmBP,KAAKN,MAAMG,IAAI,IAAI,KASnD,OAPGE,EACCQ,EAAS,cAAeR,EAAQ,OAEP,GAArBC,KAAKN,MAAMI,SACfS,EAAS,kBAIT,sBAAKzB,UAAU,YAAf,UACI,qBAAKA,UAAY,aAAjB,SACKyB,IAEL,sBAAKzB,UAAY,MAAjB,UACKkB,KAAKQ,YAAY,GACjBR,KAAKQ,YAAY,GACjBR,KAAKQ,YAAY,MAEtB,sBAAK1B,UAAY,MAAjB,UACKkB,KAAKQ,YAAY,GACjBR,KAAKQ,YAAY,GACjBR,KAAKQ,YAAY,MAEtB,sBAAK1B,UAAY,MAAjB,UACKkB,KAAKQ,YAAY,GACjBR,KAAKQ,YAAY,GACjBR,KAAKQ,YAAY,a,GA5ElBC,IAAMC,WAoFpBC,E,uKAEE,OACI,sBAAK7B,UAAU,OAAO8B,MAAM,SAA5B,UACI,qBAAK9B,UAAY,QAAjB,SACI,cAACW,EAAD,MAEJ,sBAAKX,UAAY,QAAjB,UACI,wBACA,iC,GATD2B,IAAMC,WAiBzBG,IAASC,OAAO,cAACH,EAAD,IAASI,SAASC,eAAe,W","file":"static/js/main.c44e1626.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Block(props){\n    return(\n        <button \n            className = \"block\" \n            onClick = {props.onClick}\n        >\n            {props.value}\n        </button>        \n    );\n}\n\nfunction Winner(blocks){\n    const winningCombinations = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],        \n    ];\n    for(let i = 0 ; i < winningCombinations.length; ++i){\n        const [x,y,z] =winningCombinations[i];\n        if(blocks[x] && blocks[x] === blocks[y] && blocks[x] === blocks[z]){\n            return blocks[x];\n        }\n    }\n    return null;\n}\n\n\nclass Board extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            blocks : Array(9).fill(null),\n            isX :true,\n            clicks :0,\n        };\n    }\n    checkWinner(){\n        const winner = Winner(this.state.blocks);\n        if(winner){\n            alert('!!!! '+winner+' wins !!!');\n            return;\n        }\n        if(this.state.clicks == 9){\n            alert('!!No Winner Found -- DRAW !!');\n        }\n    }\n    handleClick(id){\n        const x = this.state.blocks.slice();\n        if(Winner(x) || x[id]){    \n            return;\n        }\n        if(this.state.isX)\n            x[id] = 'X';\n        else    \n            x[id] = 'O';\n        this.setState(\n            {\n                blocks : x,\n                isX : !this.state.isX,\n                clicks : this.state.clicks+1,\n            },\n            this.checkWinner\n        );\n    }\n    renderBlock(id){\n        return(\n            <Block \n                value = {this.state.blocks[id]}\n                onClick = {() => this.handleClick(id)}\n            />\n        );\n    }\n\n\n    render(){\n        const winner = Winner(this.state.blocks);\n        let status = 'Next Player: ' + (this.state.isX?'X':'O');\n\n        if(winner){\n            status = '!!! Winner '+(winner)+' !!!';\n        }\n        else if(this.state.clicks == 9){\n            status = '!!!! DRAW !!!!';\n        }\n\n        return(\n            <div className=\"boardBody\">\n                <div className = \"declarator\"> \n                    {status}\n                </div>\n                <div className = \"row\">\n                    {this.renderBlock(0)}\n                    {this.renderBlock(1)}\n                    {this.renderBlock(2)}\n                </div>\n                <div className = \"row\">\n                    {this.renderBlock(3)}\n                    {this.renderBlock(4)}\n                    {this.renderBlock(5)}\n                </div>  \n                <div className = \"row\">\n                    {this.renderBlock(6)}\n                    {this.renderBlock(7)}\n                    {this.renderBlock(8)}\n                </div>                                \n            </div>\n            \n        );\n    }\n}\n\nclass Game extends React.Component{\n    render(){\n        return(\n            <div className=\"game\" align='center'>\n                <div className = \"board\">\n                    <Board/>\n                </div>\n                <div className = \"moves\">\n                    <div>{}</div>\n                    <ol>{}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nReactDOM.render(<Game />,document.getElementById('root'));\n"],"sourceRoot":""}